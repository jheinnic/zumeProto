package name.jchein.portfolio.micros.resolution.registry.service

import java.util.UUID
import javax.validation.Valid
import javax.validation.constraints.NotNull
import javax.validation.executable.ExecutableType
import javax.validation.executable.ValidateOnExecution
import name.jchein.demo.bstocksolutions.manifest.ingest.task.api.ServiceFacingActionsApiDelegate
import name.jchein.demo.bstocksolutions.manifest.ingest.task.dto.AcceptUploadUrl
import name.jchein.demo.bstocksolutions.manifest.ingest.task.dto.AssignWorkerProcess
import name.jchein.demo.bstocksolutions.manifest.ingest.task.dto.ReleaseWorkerProcess
import org.springframework.stereotype.Component
import org.springframework.util.concurrent.CompletableToListenableFutureAdapter

@Component
@ValidateOnExecution(type=ExecutableType.ALL)
class ServiceFacingActionsApi implements ServiceFacingActionsApiDelegate
{
	val ManifestActivityService manifestTaskService

	new(@NotNull ManifestActivityService manifestTaskService)
	{
		this.manifestTaskService = manifestTaskService
	}

	override assignWorkerProcess(@NotNull UUID marketId, @NotNull UUID id,
		@NotNull @Valid AssignWorkerProcess body)
	{
		val retVal = this.manifestTaskService.assignWorkerProcess(
			id,
			body.workerId,
			body.nodeAddress,
			body.processId,
			body.fileCachePath
		)

		return new CompletableToListenableFutureAdapter(retVal)

	}

	override releaseWorkerProcess(@NotNull UUID marketId, @NotNull UUID id,
		@NotNull @Valid ReleaseWorkerProcess body)
	{
		val retVal = this.manifestTaskService.releaseWorkerProcess(
			id,
			body.workerId
		)

		return new CompletableToListenableFutureAdapter(retVal)
	}

	override acceptUploadUrl(@NotNull UUID marketId, @NotNull UUID id, AcceptUploadUrl body)
	{
		throw new UnsupportedOperationException("TODO: auto-generated method stub")
	}

}
