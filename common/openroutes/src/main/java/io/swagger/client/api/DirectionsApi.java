

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Error;
import io.swagger.client.model.Routeresponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DirectionsApi {
    private ApiClient apiClient;

    public DirectionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DirectionsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for directionsGet
     * @param coordinates Pipe (|) separated List of longitude,latitude coordinates visited in order.  Example values:   &#x60;8.34234,48.23424&#x60;   &#x60;8.34423,48.26424&#x60;  (required)
     * @param profile Specifies the route profile. (required)
     * @param preference Specifies the route preference. (optional, default to fastest)
     * @param units Specifies the distance unit. (optional, default to m)
     * @param language Language for the route instructions. (optional, default to en)
     * @param geometry Specifies whether to return geometry. (optional, default to true)
     * @param geometryFormat Sets the format of the returned geometry. Note that for &#x60;elevation&#x3D;true&#x60; &#x60;encodedpolyline&#x60; also encodes the height information of each point. To decode, please use a suitable library (for example [graphhopper](https://github.com/graphhopper/graphhopper/blob/master/web/src/main/java/com/graphhopper/http/WebHelper.java)).  (optional, default to encodedpolyline)
     * @param geometrySimplify Specifies whether to simplify the geometry. &#x60;true&#x60; will automatically be set to &#x60;false&#x60; if &#x60;extra_info&#x60; parameter is specified. (optional, default to false)
     * @param instructions Specifies whether to return instructions. (optional, default to true)
     * @param instructionsFormat Select &#x60;html&#x60; for more verbose instructions. (optional, default to text)
     * @param roundaboutExits Provides bearings of the entrance and all passed roundabout exits. Adds the &#x60;exit_bearings&#x60; array to the &#x60;step&#x60; object in the response. Default is &#x60;false&#x60;. (optional, default to false)
     * @param attributes Pipe (|) seperated List of route attributes: * &#x60;avgspeed&#x60; - Returns average speed of each segment and the route in km/h. * &#x60;detour_factor&#x60; - Returns the deviation of a segment compared to a straight line (1) from A to B. * &#x60;percentage&#x60; - Returns the proportion of the route for each segment.  (optional)
     * @param maneuvers Specifies whether the maneuver object is included into the &#x60;step&#x60; object or not. Default value is &#x60;false&#x60;. (optional, default to false)
     * @param radiuses A pipe (&#x60;|&#x60;) delimited list of maximum distances (measured in meters) that limit the search of nearby road segments to every given waypoint. The values must be greater than &#x60;0&#x60;, the value of &#x60;-1&#x60; specifies no limit in the search. The number of radiuses correspond to the number of waypoints.  (optional)
     * @param bearings Specifies a pipe (|) delimited list of pairs (bearings and deviations) to filter the segments of the road network a waypoint can snap to. For example &#x60;bearings&#x3D;45,10|120,20&#x60;.  Each pair is a comma-separated list that can consist of one or two float values, where the first value is the bearing and the second one is the allowed deviation from the bearing. The bearing can take values between &#x60;0&#x60; and &#x60;360&#x60; clockwise from true north. If the deviation is not set, then the default value of &#x60;100&#x60; degrees is used. The number of pairs must correspond to the number of waypoints.  Setting &#x60;optimized&#x3D;false&#x60; is mandatory for this feature to work for all profiles. The number of bearings corresponds to the length of waypoints-1 or waypoints. If the bearing information for the last waypoint is given, then this will control the sector from which the destination waypoint may be reached. You can skip a bearing for a certain waypoint by passing an empty value for a pair, e.g. 30,20||40,20.  (optional)
     * @param continueStraight Forces the route to keep going straight at waypoints restricting uturns there even if it would be faster. This setting will work for all profiles except for &#x60;driving-*&#x60;. In this case you will have to set &#x60;optimized&#x3D;false&#x60; for it to work. &#x60;false&#x60; by default (optional, default to false)
     * @param elevation Specifies whether to return elevation values for points. Please note that elevation also gets encoded for &#x60;geometry_format&#x3D;encodedpolyline&#x60;. (optional, default to false)
     * @param extraInfo Pipe (|) separated List of additional information. Returns information on [steepness](https://github.com/GIScience/openrouteservice-docs/blob/master/README.md#steepness), [suitability](https://github.com/GIScience/openrouteservice-docs/blob/master/README.md#suitability), [surface](https://github.com/GIScience/openrouteservice-docs/blob/master/README.md#surface), [waycategory](https://github.com/GIScience/openrouteservice-docs/blob/master/README.md#waycategory), [waytype](https://github.com/GIScience/openrouteservice-docs/blob/master/README.md#waytype), [tollways](https://github.com/GIScience/openrouteservice-docs/blob/master/README.md#tollways) or [trail difficulty](https://github.com/GIScience/openrouteservice-docs/blob/master/README.md#trail-difficulty)  (optional)
     * @param optimized Uses contraction hierarchies if available (&#x60;false&#x60;). &#x60;true&#x60; by default  (optional, default to true)
     * @param options For advanced options formatted as json object. For structure refer to the **options model** below. The available parameters are:     - &#x60;maximum_speed&#x60; : Specifies a maximum travel speed restriction in km/h.     - &#x60;avoid_features&#x60; : Pipe (|) seperated list of features to avoid.     The available features are :        |     Feature    | Available for                               |       |:--------------:|---------------------------------------------|       | &#x60;highways&#x60;     | driving-*                                   |       | &#x60;tollways&#x60;     | driving-*                                   |       | &#x60;ferries&#x60;      | driving-\\*, cycling-\\*, foot-\\*, wheelchair |       | &#x60;tunnels&#x60;      | driving-*                                   |       | &#x60;pavedroads&#x60;   | driving-\\*, cycling-*                       |       | &#x60;unpavedroads&#x60; | driving-\\*, cycling-*                       |       | &#x60;tracks&#x60;       | driving-*                                   |       | &#x60;fords&#x60;        | driving-\\*, cycling-\\*, foot-*              |       | &#x60;steps&#x60;        | cycling-\\*, foot-\\*, wheelchair             |       | &#x60;hills&#x60;        | cycling-\\*, foot-\\*                         |     - &#x60;vehicle_type&#x60; (for &#x60;profile&#x3D;driving-hgv&#x60; only): &#x60;hgv&#x60;,&#x60;bus&#x60;,&#x60;agricultural&#x60;,&#x60;delivery&#x60;,&#x60;forestry&#x60; and &#x60;goods&#x60;. It is needed for **vehicle restrictions** to work.     - &#x60;profile_params&#x60; : Specifies additional routing parameters.     - &#x60;weightings&#x60;: Weightings will prioritize specified factors over the shortest path.       - &#x60;steepness_difficulty&#x60;: Specifies the fitness level for &#x60;cycling-*&#x60; profiles.         - &#x60;level&#x60;: &#x60;0&#x60; &#x3D; Novice, &#x60;1&#x60; &#x3D; Moderate, &#x60;2&#x60; &#x3D; Amateur, &#x60;3&#x60; &#x3D; Pro. The prefered gradient increases with level        - &#x60;green&#x60;: Specifies the Green factor for &#x60;foot-*&#x60; profiles.         - &#x60;factor&#x60;: Values range from &#x60;0&#x60; to &#x60;1&#x60;. &#x60;0&#x60; equals normal routing. &#x60;1&#x60; will prefer ways through green areas over a shorter route.        - &#x60;quiet&#x60;: Specifies the Quiet factor for &#x60;foot-*&#x60; profiles.         - &#x60;factor&#x60;: Values range from &#x60;0&#x60; to &#x60;1&#x60;. &#x60;0&#x60; equals normal routing. &#x60;1&#x60; will prefer quiet ways over a shorter route.      - &#x60;restrictions&#x60; : Specifies restrictions for &#x60;driving-hgv&#x60;, &#x60;wheelchair&#x60; or &#x60;cycling-*&#x60; profiles.       - for &#x60;cycling-*&#x60;:                       |  Parameter | Description                                                                                                                                                                               |           |:----------:|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|           | &#x60;gradient&#x60; | Only for avoided &#x60;hills&#x60; or specified &#x60;steepness_difficulty&#x60;. Specifies the maximum route steepness in percent. Values range from &#x60;1&#x60; to &#x60;15&#x60;. Routes with a higher gradient are avoided. |        - for &#x60;driving-hgv&#x60;:          _(you have to specify the &#x60;vehicle_type&#x60; in the options for these parameters)_            |  Parameter | Description                                                                                                                       |           |:----------:|-----------------------------------------------------------------------------------------------------------------------------------|           | &#x60;length&#x60;   | Length restriction in meters.                                                                                                     |           | &#x60;width&#x60;    | Width restriction in meters.                                                                                                      |           | &#x60;height&#x60;   | Height restriction in meters.                                                                                                     |           | &#x60;axleload&#x60; | Axleload restriction in tons.                                                                                                     |           | &#x60;weight&#x60;   | Weight restriction in tons.                                                                                                       |           | &#x60;hazmat&#x60;   | Specifies whether to use appropriate routing for delivering hazardous goods and avoiding water protected areas. Default is false. |        - for &#x60;wheelchair&#x60;:          |       Parameter       | Description                                                                                                                 |         |:---------------------:|-----------------------------------------------------------------------------------------------------------------------------|         |     &#x60;surface_type&#x60;    | Specifies the minimum [surface type](http://wiki.openstreetmap.org/wiki/Key:surface). Default is &#x60;\&quot;cobblestone:flattened\&quot;&#x60;. |         |      &#x60;track_type&#x60;     | Specifies the minimum [grade](http://wiki.openstreetmap.org/wiki/Key:tracktype) of the route. Default is &#x60;\&quot;grade1\&quot;&#x60;.        |         |   &#x60;smoothness_type&#x60;   | Specifies the minimum [smoothness](http://wiki.openstreetmap.org/wiki/Key:smoothness) of the route. Default is &#x60;\&quot;good\&quot;&#x60;.    |         | &#x60;maximum_sloped_curb&#x60; | Specifies the maximum height of the sloped curb in meters. Values are &#x60;0.03&#x60;, &#x60;0.06&#x60;(default), &#x60;0.1&#x60; or &#x60;any&#x60;.              |         |   &#x60;maximum_incline&#x60;   | Specifies the maximum incline as a percentage. &#x60;3&#x60;, &#x60;6&#x60;(default), &#x60;10&#x60;, &#x60;15&#x60; or &#x60;any&#x60;.                                      |     - &#x60;avoid_polygons&#x60; : Comprises areas to be avoided for the route. Formatted as [geojson polygon](http://geojson.org/geojson-spec.html#id4) or [geojson multipolygon](http://geojson.org/geojson-spec.html#id7).  This is an example options object for a &#x60;cycling-*&#x60; profile:  &#x60;&#x60;&#x60;json {   \&quot;maximum_speed\&quot;: 10,   \&quot;avoid_features\&quot;: \&quot;unpavedroads\&quot;,   \&quot;profile_params\&quot;: {     \&quot;weightings\&quot;: {       \&quot;steepness_difficulty\&quot;: {         \&quot;level\&quot;: 1       },       \&quot;green\&quot;: {         \&quot;factor\&quot;: 0.8       },       \&quot;quiet\&quot;: {         \&quot;factor\&quot;: 1.0       }     },     \&quot;restrictions\&quot;: {       \&quot;gradient\&quot;: 5     }   },   \&quot;avoid_polygons\&quot;: {     \&quot;type\&quot;: \&quot;Polygon\&quot;,     \&quot;coordinates\&quot;: [                     [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0] ]    ]} } &#x60;&#x60;&#x60; The minified form(for copy paste purposes):  &#x60;{\&quot;maximum_speed\&quot;:10,\&quot;avoid_features\&quot;:\&quot;unpavedroads\&quot;,\&quot;profile_params\&quot;:{\&quot;weightings\&quot;:{\&quot;steepness_difficulty\&quot;:{\&quot;level\&quot;:1},\&quot;green\&quot;:{\&quot;factor\&quot;:0.8},\&quot;quiet\&quot;:{\&quot;factor\&quot;:1.0}},\&quot;restrictions\&quot;:{\&quot;gradient\&quot;:5}},\&quot;avoid_polygons\&quot;:{\&quot;type\&quot;:\&quot;Polygon\&quot;,\&quot;coordinates\&quot;:[[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]]]}}&#x60;  More examples can be found [here](https://github.com/GIScience/openrouteservice-docs#examples).  (optional, default to {})
     * @param id Arbitrary identification string of the request reflected in the meta information. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call directionsGetCall(List<String> coordinates, String profile, String preference, String units, String language, Boolean geometry, String geometryFormat, Boolean geometrySimplify, Boolean instructions, String instructionsFormat, Boolean roundaboutExits, List<String> attributes, Boolean maneuvers, List<Float> radiuses, List<String> bearings, Boolean continueStraight, Boolean elevation, List<String> extraInfo, Boolean optimized, String options, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/directions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (coordinates != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("pipes", "coordinates", coordinates));
        if (profile != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("profile", profile));
        if (preference != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("preference", preference));
        if (units != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("units", units));
        if (language != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("language", language));
        if (geometry != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("geometry", geometry));
        if (geometryFormat != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("geometry_format", geometryFormat));
        if (geometrySimplify != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("geometry_simplify", geometrySimplify));
        if (instructions != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("instructions", instructions));
        if (instructionsFormat != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("instructions_format", instructionsFormat));
        if (roundaboutExits != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("roundabout_exits", roundaboutExits));
        if (attributes != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("pipes", "attributes", attributes));
        if (maneuvers != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maneuvers", maneuvers));
        if (radiuses != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("pipes", "radiuses", radiuses));
        if (bearings != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("pipes", "bearings", bearings));
        if (continueStraight != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("continue_straight", continueStraight));
        if (elevation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("elevation", elevation));
        if (extraInfo != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("pipes", "extra_info", extraInfo));
        if (optimized != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("optimized", optimized));
        if (options != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("options", options));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/json; charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "UserSecurity" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call directionsGetValidateBeforeCall(List<String> coordinates, String profile, String preference, String units, String language, Boolean geometry, String geometryFormat, Boolean geometrySimplify, Boolean instructions, String instructionsFormat, Boolean roundaboutExits, List<String> attributes, Boolean maneuvers, List<Float> radiuses, List<String> bearings, Boolean continueStraight, Boolean elevation, List<String> extraInfo, Boolean optimized, String options, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'coordinates' is set
        if (coordinates == null) {
            throw new ApiException("Missing the required parameter 'coordinates' when calling directionsGet(Async)");
        }
        
        // verify the required parameter 'profile' is set
        if (profile == null) {
            throw new ApiException("Missing the required parameter 'profile' when calling directionsGet(Async)");
        }
        

        com.squareup.okhttp.Call call = directionsGetCall(coordinates, profile, preference, units, language, geometry, geometryFormat, geometrySimplify, instructions, instructionsFormat, roundaboutExits, attributes, maneuvers, radiuses, bearings, continueStraight, elevation, extraInfo, optimized, options, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Routing Service
     * Returns a route between two or more locations for a selected profile and its settings as GeoJSON response. 
     * @param coordinates Pipe (|) separated List of longitude,latitude coordinates visited in order.  Example values:   &#x60;8.34234,48.23424&#x60;   &#x60;8.34423,48.26424&#x60;  (required)
     * @param profile Specifies the route profile. (required)
     * @param preference Specifies the route preference. (optional, default to fastest)
     * @param units Specifies the distance unit. (optional, default to m)
     * @param language Language for the route instructions. (optional, default to en)
     * @param geometry Specifies whether to return geometry. (optional, default to true)
     * @param geometryFormat Sets the format of the returned geometry. Note that for &#x60;elevation&#x3D;true&#x60; &#x60;encodedpolyline&#x60; also encodes the height information of each point. To decode, please use a suitable library (for example [graphhopper](https://github.com/graphhopper/graphhopper/blob/master/web/src/main/java/com/graphhopper/http/WebHelper.java)).  (optional, default to encodedpolyline)
     * @param geometrySimplify Specifies whether to simplify the geometry. &#x60;true&#x60; will automatically be set to &#x60;false&#x60; if &#x60;extra_info&#x60; parameter is specified. (optional, default to false)
     * @param instructions Specifies whether to return instructions. (optional, default to true)
     * @param instructionsFormat Select &#x60;html&#x60; for more verbose instructions. (optional, default to text)
     * @param roundaboutExits Provides bearings of the entrance and all passed roundabout exits. Adds the &#x60;exit_bearings&#x60; array to the &#x60;step&#x60; object in the response. Default is &#x60;false&#x60;. (optional, default to false)
     * @param attributes Pipe (|) seperated List of route attributes: * &#x60;avgspeed&#x60; - Returns average speed of each segment and the route in km/h. * &#x60;detour_factor&#x60; - Returns the deviation of a segment compared to a straight line (1) from A to B. * &#x60;percentage&#x60; - Returns the proportion of the route for each segment.  (optional)
     * @param maneuvers Specifies whether the maneuver object is included into the &#x60;step&#x60; object or not. Default value is &#x60;false&#x60;. (optional, default to false)
     * @param radiuses A pipe (&#x60;|&#x60;) delimited list of maximum distances (measured in meters) that limit the search of nearby road segments to every given waypoint. The values must be greater than &#x60;0&#x60;, the value of &#x60;-1&#x60; specifies no limit in the search. The number of radiuses correspond to the number of waypoints.  (optional)
     * @param bearings Specifies a pipe (|) delimited list of pairs (bearings and deviations) to filter the segments of the road network a waypoint can snap to. For example &#x60;bearings&#x3D;45,10|120,20&#x60;.  Each pair is a comma-separated list that can consist of one or two float values, where the first value is the bearing and the second one is the allowed deviation from the bearing. The bearing can take values between &#x60;0&#x60; and &#x60;360&#x60; clockwise from true north. If the deviation is not set, then the default value of &#x60;100&#x60; degrees is used. The number of pairs must correspond to the number of waypoints.  Setting &#x60;optimized&#x3D;false&#x60; is mandatory for this feature to work for all profiles. The number of bearings corresponds to the length of waypoints-1 or waypoints. If the bearing information for the last waypoint is given, then this will control the sector from which the destination waypoint may be reached. You can skip a bearing for a certain waypoint by passing an empty value for a pair, e.g. 30,20||40,20.  (optional)
     * @param continueStraight Forces the route to keep going straight at waypoints restricting uturns there even if it would be faster. This setting will work for all profiles except for &#x60;driving-*&#x60;. In this case you will have to set &#x60;optimized&#x3D;false&#x60; for it to work. &#x60;false&#x60; by default (optional, default to false)
     * @param elevation Specifies whether to return elevation values for points. Please note that elevation also gets encoded for &#x60;geometry_format&#x3D;encodedpolyline&#x60;. (optional, default to false)
     * @param extraInfo Pipe (|) separated List of additional information. Returns information on [steepness](https://github.com/GIScience/openrouteservice-docs/blob/master/README.md#steepness), [suitability](https://github.com/GIScience/openrouteservice-docs/blob/master/README.md#suitability), [surface](https://github.com/GIScience/openrouteservice-docs/blob/master/README.md#surface), [waycategory](https://github.com/GIScience/openrouteservice-docs/blob/master/README.md#waycategory), [waytype](https://github.com/GIScience/openrouteservice-docs/blob/master/README.md#waytype), [tollways](https://github.com/GIScience/openrouteservice-docs/blob/master/README.md#tollways) or [trail difficulty](https://github.com/GIScience/openrouteservice-docs/blob/master/README.md#trail-difficulty)  (optional)
     * @param optimized Uses contraction hierarchies if available (&#x60;false&#x60;). &#x60;true&#x60; by default  (optional, default to true)
     * @param options For advanced options formatted as json object. For structure refer to the **options model** below. The available parameters are:     - &#x60;maximum_speed&#x60; : Specifies a maximum travel speed restriction in km/h.     - &#x60;avoid_features&#x60; : Pipe (|) seperated list of features to avoid.     The available features are :        |     Feature    | Available for                               |       |:--------------:|---------------------------------------------|       | &#x60;highways&#x60;     | driving-*                                   |       | &#x60;tollways&#x60;     | driving-*                                   |       | &#x60;ferries&#x60;      | driving-\\*, cycling-\\*, foot-\\*, wheelchair |       | &#x60;tunnels&#x60;      | driving-*                                   |       | &#x60;pavedroads&#x60;   | driving-\\*, cycling-*                       |       | &#x60;unpavedroads&#x60; | driving-\\*, cycling-*                       |       | &#x60;tracks&#x60;       | driving-*                                   |       | &#x60;fords&#x60;        | driving-\\*, cycling-\\*, foot-*              |       | &#x60;steps&#x60;        | cycling-\\*, foot-\\*, wheelchair             |       | &#x60;hills&#x60;        | cycling-\\*, foot-\\*                         |     - &#x60;vehicle_type&#x60; (for &#x60;profile&#x3D;driving-hgv&#x60; only): &#x60;hgv&#x60;,&#x60;bus&#x60;,&#x60;agricultural&#x60;,&#x60;delivery&#x60;,&#x60;forestry&#x60; and &#x60;goods&#x60;. It is needed for **vehicle restrictions** to work.     - &#x60;profile_params&#x60; : Specifies additional routing parameters.     - &#x60;weightings&#x60;: Weightings will prioritize specified factors over the shortest path.       - &#x60;steepness_difficulty&#x60;: Specifies the fitness level for &#x60;cycling-*&#x60; profiles.         - &#x60;level&#x60;: &#x60;0&#x60; &#x3D; Novice, &#x60;1&#x60; &#x3D; Moderate, &#x60;2&#x60; &#x3D; Amateur, &#x60;3&#x60; &#x3D; Pro. The prefered gradient increases with level        - &#x60;green&#x60;: Specifies the Green factor for &#x60;foot-*&#x60; profiles.         - &#x60;factor&#x60;: Values range from &#x60;0&#x60; to &#x60;1&#x60;. &#x60;0&#x60; equals normal routing. &#x60;1&#x60; will prefer ways through green areas over a shorter route.        - &#x60;quiet&#x60;: Specifies the Quiet factor for &#x60;foot-*&#x60; profiles.         - &#x60;factor&#x60;: Values range from &#x60;0&#x60; to &#x60;1&#x60;. &#x60;0&#x60; equals normal routing. &#x60;1&#x60; will prefer quiet ways over a shorter route.      - &#x60;restrictions&#x60; : Specifies restrictions for &#x60;driving-hgv&#x60;, &#x60;wheelchair&#x60; or &#x60;cycling-*&#x60; profiles.       - for &#x60;cycling-*&#x60;:                       |  Parameter | Description                                                                                                                                                                               |           |:----------:|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|           | &#x60;gradient&#x60; | Only for avoided &#x60;hills&#x60; or specified &#x60;steepness_difficulty&#x60;. Specifies the maximum route steepness in percent. Values range from &#x60;1&#x60; to &#x60;15&#x60;. Routes with a higher gradient are avoided. |        - for &#x60;driving-hgv&#x60;:          _(you have to specify the &#x60;vehicle_type&#x60; in the options for these parameters)_            |  Parameter | Description                                                                                                                       |           |:----------:|-----------------------------------------------------------------------------------------------------------------------------------|           | &#x60;length&#x60;   | Length restriction in meters.                                                                                                     |           | &#x60;width&#x60;    | Width restriction in meters.                                                                                                      |           | &#x60;height&#x60;   | Height restriction in meters.                                                                                                     |           | &#x60;axleload&#x60; | Axleload restriction in tons.                                                                                                     |           | &#x60;weight&#x60;   | Weight restriction in tons.                                                                                                       |           | &#x60;hazmat&#x60;   | Specifies whether to use appropriate routing for delivering hazardous goods and avoiding water protected areas. Default is false. |        - for &#x60;wheelchair&#x60;:          |       Parameter       | Description                                                                                                                 |         |:---------------------:|-----------------------------------------------------------------------------------------------------------------------------|         |     &#x60;surface_type&#x60;    | Specifies the minimum [surface type](http://wiki.openstreetmap.org/wiki/Key:surface). Default is &#x60;\&quot;cobblestone:flattened\&quot;&#x60;. |         |      &#x60;track_type&#x60;     | Specifies the minimum [grade](http://wiki.openstreetmap.org/wiki/Key:tracktype) of the route. Default is &#x60;\&quot;grade1\&quot;&#x60;.        |         |   &#x60;smoothness_type&#x60;   | Specifies the minimum [smoothness](http://wiki.openstreetmap.org/wiki/Key:smoothness) of the route. Default is &#x60;\&quot;good\&quot;&#x60;.    |         | &#x60;maximum_sloped_curb&#x60; | Specifies the maximum height of the sloped curb in meters. Values are &#x60;0.03&#x60;, &#x60;0.06&#x60;(default), &#x60;0.1&#x60; or &#x60;any&#x60;.              |         |   &#x60;maximum_incline&#x60;   | Specifies the maximum incline as a percentage. &#x60;3&#x60;, &#x60;6&#x60;(default), &#x60;10&#x60;, &#x60;15&#x60; or &#x60;any&#x60;.                                      |     - &#x60;avoid_polygons&#x60; : Comprises areas to be avoided for the route. Formatted as [geojson polygon](http://geojson.org/geojson-spec.html#id4) or [geojson multipolygon](http://geojson.org/geojson-spec.html#id7).  This is an example options object for a &#x60;cycling-*&#x60; profile:  &#x60;&#x60;&#x60;json {   \&quot;maximum_speed\&quot;: 10,   \&quot;avoid_features\&quot;: \&quot;unpavedroads\&quot;,   \&quot;profile_params\&quot;: {     \&quot;weightings\&quot;: {       \&quot;steepness_difficulty\&quot;: {         \&quot;level\&quot;: 1       },       \&quot;green\&quot;: {         \&quot;factor\&quot;: 0.8       },       \&quot;quiet\&quot;: {         \&quot;factor\&quot;: 1.0       }     },     \&quot;restrictions\&quot;: {       \&quot;gradient\&quot;: 5     }   },   \&quot;avoid_polygons\&quot;: {     \&quot;type\&quot;: \&quot;Polygon\&quot;,     \&quot;coordinates\&quot;: [                     [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0] ]    ]} } &#x60;&#x60;&#x60; The minified form(for copy paste purposes):  &#x60;{\&quot;maximum_speed\&quot;:10,\&quot;avoid_features\&quot;:\&quot;unpavedroads\&quot;,\&quot;profile_params\&quot;:{\&quot;weightings\&quot;:{\&quot;steepness_difficulty\&quot;:{\&quot;level\&quot;:1},\&quot;green\&quot;:{\&quot;factor\&quot;:0.8},\&quot;quiet\&quot;:{\&quot;factor\&quot;:1.0}},\&quot;restrictions\&quot;:{\&quot;gradient\&quot;:5}},\&quot;avoid_polygons\&quot;:{\&quot;type\&quot;:\&quot;Polygon\&quot;,\&quot;coordinates\&quot;:[[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]]]}}&#x60;  More examples can be found [here](https://github.com/GIScience/openrouteservice-docs#examples).  (optional, default to {})
     * @param id Arbitrary identification string of the request reflected in the meta information. (optional)
     * @return Routeresponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Routeresponse directionsGet(List<String> coordinates, String profile, String preference, String units, String language, Boolean geometry, String geometryFormat, Boolean geometrySimplify, Boolean instructions, String instructionsFormat, Boolean roundaboutExits, List<String> attributes, Boolean maneuvers, List<Float> radiuses, List<String> bearings, Boolean continueStraight, Boolean elevation, List<String> extraInfo, Boolean optimized, String options, String id) throws ApiException {
        ApiResponse<Routeresponse> resp = directionsGetWithHttpInfo(coordinates, profile, preference, units, language, geometry, geometryFormat, geometrySimplify, instructions, instructionsFormat, roundaboutExits, attributes, maneuvers, radiuses, bearings, continueStraight, elevation, extraInfo, optimized, options, id);
        return resp.getData();
    }

    /**
     * Routing Service
     * Returns a route between two or more locations for a selected profile and its settings as GeoJSON response. 
     * @param coordinates Pipe (|) separated List of longitude,latitude coordinates visited in order.  Example values:   &#x60;8.34234,48.23424&#x60;   &#x60;8.34423,48.26424&#x60;  (required)
     * @param profile Specifies the route profile. (required)
     * @param preference Specifies the route preference. (optional, default to fastest)
     * @param units Specifies the distance unit. (optional, default to m)
     * @param language Language for the route instructions. (optional, default to en)
     * @param geometry Specifies whether to return geometry. (optional, default to true)
     * @param geometryFormat Sets the format of the returned geometry. Note that for &#x60;elevation&#x3D;true&#x60; &#x60;encodedpolyline&#x60; also encodes the height information of each point. To decode, please use a suitable library (for example [graphhopper](https://github.com/graphhopper/graphhopper/blob/master/web/src/main/java/com/graphhopper/http/WebHelper.java)).  (optional, default to encodedpolyline)
     * @param geometrySimplify Specifies whether to simplify the geometry. &#x60;true&#x60; will automatically be set to &#x60;false&#x60; if &#x60;extra_info&#x60; parameter is specified. (optional, default to false)
     * @param instructions Specifies whether to return instructions. (optional, default to true)
     * @param instructionsFormat Select &#x60;html&#x60; for more verbose instructions. (optional, default to text)
     * @param roundaboutExits Provides bearings of the entrance and all passed roundabout exits. Adds the &#x60;exit_bearings&#x60; array to the &#x60;step&#x60; object in the response. Default is &#x60;false&#x60;. (optional, default to false)
     * @param attributes Pipe (|) seperated List of route attributes: * &#x60;avgspeed&#x60; - Returns average speed of each segment and the route in km/h. * &#x60;detour_factor&#x60; - Returns the deviation of a segment compared to a straight line (1) from A to B. * &#x60;percentage&#x60; - Returns the proportion of the route for each segment.  (optional)
     * @param maneuvers Specifies whether the maneuver object is included into the &#x60;step&#x60; object or not. Default value is &#x60;false&#x60;. (optional, default to false)
     * @param radiuses A pipe (&#x60;|&#x60;) delimited list of maximum distances (measured in meters) that limit the search of nearby road segments to every given waypoint. The values must be greater than &#x60;0&#x60;, the value of &#x60;-1&#x60; specifies no limit in the search. The number of radiuses correspond to the number of waypoints.  (optional)
     * @param bearings Specifies a pipe (|) delimited list of pairs (bearings and deviations) to filter the segments of the road network a waypoint can snap to. For example &#x60;bearings&#x3D;45,10|120,20&#x60;.  Each pair is a comma-separated list that can consist of one or two float values, where the first value is the bearing and the second one is the allowed deviation from the bearing. The bearing can take values between &#x60;0&#x60; and &#x60;360&#x60; clockwise from true north. If the deviation is not set, then the default value of &#x60;100&#x60; degrees is used. The number of pairs must correspond to the number of waypoints.  Setting &#x60;optimized&#x3D;false&#x60; is mandatory for this feature to work for all profiles. The number of bearings corresponds to the length of waypoints-1 or waypoints. If the bearing information for the last waypoint is given, then this will control the sector from which the destination waypoint may be reached. You can skip a bearing for a certain waypoint by passing an empty value for a pair, e.g. 30,20||40,20.  (optional)
     * @param continueStraight Forces the route to keep going straight at waypoints restricting uturns there even if it would be faster. This setting will work for all profiles except for &#x60;driving-*&#x60;. In this case you will have to set &#x60;optimized&#x3D;false&#x60; for it to work. &#x60;false&#x60; by default (optional, default to false)
     * @param elevation Specifies whether to return elevation values for points. Please note that elevation also gets encoded for &#x60;geometry_format&#x3D;encodedpolyline&#x60;. (optional, default to false)
     * @param extraInfo Pipe (|) separated List of additional information. Returns information on [steepness](https://github.com/GIScience/openrouteservice-docs/blob/master/README.md#steepness), [suitability](https://github.com/GIScience/openrouteservice-docs/blob/master/README.md#suitability), [surface](https://github.com/GIScience/openrouteservice-docs/blob/master/README.md#surface), [waycategory](https://github.com/GIScience/openrouteservice-docs/blob/master/README.md#waycategory), [waytype](https://github.com/GIScience/openrouteservice-docs/blob/master/README.md#waytype), [tollways](https://github.com/GIScience/openrouteservice-docs/blob/master/README.md#tollways) or [trail difficulty](https://github.com/GIScience/openrouteservice-docs/blob/master/README.md#trail-difficulty)  (optional)
     * @param optimized Uses contraction hierarchies if available (&#x60;false&#x60;). &#x60;true&#x60; by default  (optional, default to true)
     * @param options For advanced options formatted as json object. For structure refer to the **options model** below. The available parameters are:     - &#x60;maximum_speed&#x60; : Specifies a maximum travel speed restriction in km/h.     - &#x60;avoid_features&#x60; : Pipe (|) seperated list of features to avoid.     The available features are :        |     Feature    | Available for                               |       |:--------------:|---------------------------------------------|       | &#x60;highways&#x60;     | driving-*                                   |       | &#x60;tollways&#x60;     | driving-*                                   |       | &#x60;ferries&#x60;      | driving-\\*, cycling-\\*, foot-\\*, wheelchair |       | &#x60;tunnels&#x60;      | driving-*                                   |       | &#x60;pavedroads&#x60;   | driving-\\*, cycling-*                       |       | &#x60;unpavedroads&#x60; | driving-\\*, cycling-*                       |       | &#x60;tracks&#x60;       | driving-*                                   |       | &#x60;fords&#x60;        | driving-\\*, cycling-\\*, foot-*              |       | &#x60;steps&#x60;        | cycling-\\*, foot-\\*, wheelchair             |       | &#x60;hills&#x60;        | cycling-\\*, foot-\\*                         |     - &#x60;vehicle_type&#x60; (for &#x60;profile&#x3D;driving-hgv&#x60; only): &#x60;hgv&#x60;,&#x60;bus&#x60;,&#x60;agricultural&#x60;,&#x60;delivery&#x60;,&#x60;forestry&#x60; and &#x60;goods&#x60;. It is needed for **vehicle restrictions** to work.     - &#x60;profile_params&#x60; : Specifies additional routing parameters.     - &#x60;weightings&#x60;: Weightings will prioritize specified factors over the shortest path.       - &#x60;steepness_difficulty&#x60;: Specifies the fitness level for &#x60;cycling-*&#x60; profiles.         - &#x60;level&#x60;: &#x60;0&#x60; &#x3D; Novice, &#x60;1&#x60; &#x3D; Moderate, &#x60;2&#x60; &#x3D; Amateur, &#x60;3&#x60; &#x3D; Pro. The prefered gradient increases with level        - &#x60;green&#x60;: Specifies the Green factor for &#x60;foot-*&#x60; profiles.         - &#x60;factor&#x60;: Values range from &#x60;0&#x60; to &#x60;1&#x60;. &#x60;0&#x60; equals normal routing. &#x60;1&#x60; will prefer ways through green areas over a shorter route.        - &#x60;quiet&#x60;: Specifies the Quiet factor for &#x60;foot-*&#x60; profiles.         - &#x60;factor&#x60;: Values range from &#x60;0&#x60; to &#x60;1&#x60;. &#x60;0&#x60; equals normal routing. &#x60;1&#x60; will prefer quiet ways over a shorter route.      - &#x60;restrictions&#x60; : Specifies restrictions for &#x60;driving-hgv&#x60;, &#x60;wheelchair&#x60; or &#x60;cycling-*&#x60; profiles.       - for &#x60;cycling-*&#x60;:                       |  Parameter | Description                                                                                                                                                                               |           |:----------:|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|           | &#x60;gradient&#x60; | Only for avoided &#x60;hills&#x60; or specified &#x60;steepness_difficulty&#x60;. Specifies the maximum route steepness in percent. Values range from &#x60;1&#x60; to &#x60;15&#x60;. Routes with a higher gradient are avoided. |        - for &#x60;driving-hgv&#x60;:          _(you have to specify the &#x60;vehicle_type&#x60; in the options for these parameters)_            |  Parameter | Description                                                                                                                       |           |:----------:|-----------------------------------------------------------------------------------------------------------------------------------|           | &#x60;length&#x60;   | Length restriction in meters.                                                                                                     |           | &#x60;width&#x60;    | Width restriction in meters.                                                                                                      |           | &#x60;height&#x60;   | Height restriction in meters.                                                                                                     |           | &#x60;axleload&#x60; | Axleload restriction in tons.                                                                                                     |           | &#x60;weight&#x60;   | Weight restriction in tons.                                                                                                       |           | &#x60;hazmat&#x60;   | Specifies whether to use appropriate routing for delivering hazardous goods and avoiding water protected areas. Default is false. |        - for &#x60;wheelchair&#x60;:          |       Parameter       | Description                                                                                                                 |         |:---------------------:|-----------------------------------------------------------------------------------------------------------------------------|         |     &#x60;surface_type&#x60;    | Specifies the minimum [surface type](http://wiki.openstreetmap.org/wiki/Key:surface). Default is &#x60;\&quot;cobblestone:flattened\&quot;&#x60;. |         |      &#x60;track_type&#x60;     | Specifies the minimum [grade](http://wiki.openstreetmap.org/wiki/Key:tracktype) of the route. Default is &#x60;\&quot;grade1\&quot;&#x60;.        |         |   &#x60;smoothness_type&#x60;   | Specifies the minimum [smoothness](http://wiki.openstreetmap.org/wiki/Key:smoothness) of the route. Default is &#x60;\&quot;good\&quot;&#x60;.    |         | &#x60;maximum_sloped_curb&#x60; | Specifies the maximum height of the sloped curb in meters. Values are &#x60;0.03&#x60;, &#x60;0.06&#x60;(default), &#x60;0.1&#x60; or &#x60;any&#x60;.              |         |   &#x60;maximum_incline&#x60;   | Specifies the maximum incline as a percentage. &#x60;3&#x60;, &#x60;6&#x60;(default), &#x60;10&#x60;, &#x60;15&#x60; or &#x60;any&#x60;.                                      |     - &#x60;avoid_polygons&#x60; : Comprises areas to be avoided for the route. Formatted as [geojson polygon](http://geojson.org/geojson-spec.html#id4) or [geojson multipolygon](http://geojson.org/geojson-spec.html#id7).  This is an example options object for a &#x60;cycling-*&#x60; profile:  &#x60;&#x60;&#x60;json {   \&quot;maximum_speed\&quot;: 10,   \&quot;avoid_features\&quot;: \&quot;unpavedroads\&quot;,   \&quot;profile_params\&quot;: {     \&quot;weightings\&quot;: {       \&quot;steepness_difficulty\&quot;: {         \&quot;level\&quot;: 1       },       \&quot;green\&quot;: {         \&quot;factor\&quot;: 0.8       },       \&quot;quiet\&quot;: {         \&quot;factor\&quot;: 1.0       }     },     \&quot;restrictions\&quot;: {       \&quot;gradient\&quot;: 5     }   },   \&quot;avoid_polygons\&quot;: {     \&quot;type\&quot;: \&quot;Polygon\&quot;,     \&quot;coordinates\&quot;: [                     [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0] ]    ]} } &#x60;&#x60;&#x60; The minified form(for copy paste purposes):  &#x60;{\&quot;maximum_speed\&quot;:10,\&quot;avoid_features\&quot;:\&quot;unpavedroads\&quot;,\&quot;profile_params\&quot;:{\&quot;weightings\&quot;:{\&quot;steepness_difficulty\&quot;:{\&quot;level\&quot;:1},\&quot;green\&quot;:{\&quot;factor\&quot;:0.8},\&quot;quiet\&quot;:{\&quot;factor\&quot;:1.0}},\&quot;restrictions\&quot;:{\&quot;gradient\&quot;:5}},\&quot;avoid_polygons\&quot;:{\&quot;type\&quot;:\&quot;Polygon\&quot;,\&quot;coordinates\&quot;:[[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]]]}}&#x60;  More examples can be found [here](https://github.com/GIScience/openrouteservice-docs#examples).  (optional, default to {})
     * @param id Arbitrary identification string of the request reflected in the meta information. (optional)
     * @return ApiResponse&lt;Routeresponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Routeresponse> directionsGetWithHttpInfo(List<String> coordinates, String profile, String preference, String units, String language, Boolean geometry, String geometryFormat, Boolean geometrySimplify, Boolean instructions, String instructionsFormat, Boolean roundaboutExits, List<String> attributes, Boolean maneuvers, List<Float> radiuses, List<String> bearings, Boolean continueStraight, Boolean elevation, List<String> extraInfo, Boolean optimized, String options, String id) throws ApiException {
        com.squareup.okhttp.Call call = directionsGetValidateBeforeCall(coordinates, profile, preference, units, language, geometry, geometryFormat, geometrySimplify, instructions, instructionsFormat, roundaboutExits, attributes, maneuvers, radiuses, bearings, continueStraight, elevation, extraInfo, optimized, options, id, null, null);
        Type localVarReturnType = new TypeToken<Routeresponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Routing Service (asynchronously)
     * Returns a route between two or more locations for a selected profile and its settings as GeoJSON response. 
     * @param coordinates Pipe (|) separated List of longitude,latitude coordinates visited in order.  Example values:   &#x60;8.34234,48.23424&#x60;   &#x60;8.34423,48.26424&#x60;  (required)
     * @param profile Specifies the route profile. (required)
     * @param preference Specifies the route preference. (optional, default to fastest)
     * @param units Specifies the distance unit. (optional, default to m)
     * @param language Language for the route instructions. (optional, default to en)
     * @param geometry Specifies whether to return geometry. (optional, default to true)
     * @param geometryFormat Sets the format of the returned geometry. Note that for &#x60;elevation&#x3D;true&#x60; &#x60;encodedpolyline&#x60; also encodes the height information of each point. To decode, please use a suitable library (for example [graphhopper](https://github.com/graphhopper/graphhopper/blob/master/web/src/main/java/com/graphhopper/http/WebHelper.java)).  (optional, default to encodedpolyline)
     * @param geometrySimplify Specifies whether to simplify the geometry. &#x60;true&#x60; will automatically be set to &#x60;false&#x60; if &#x60;extra_info&#x60; parameter is specified. (optional, default to false)
     * @param instructions Specifies whether to return instructions. (optional, default to true)
     * @param instructionsFormat Select &#x60;html&#x60; for more verbose instructions. (optional, default to text)
     * @param roundaboutExits Provides bearings of the entrance and all passed roundabout exits. Adds the &#x60;exit_bearings&#x60; array to the &#x60;step&#x60; object in the response. Default is &#x60;false&#x60;. (optional, default to false)
     * @param attributes Pipe (|) seperated List of route attributes: * &#x60;avgspeed&#x60; - Returns average speed of each segment and the route in km/h. * &#x60;detour_factor&#x60; - Returns the deviation of a segment compared to a straight line (1) from A to B. * &#x60;percentage&#x60; - Returns the proportion of the route for each segment.  (optional)
     * @param maneuvers Specifies whether the maneuver object is included into the &#x60;step&#x60; object or not. Default value is &#x60;false&#x60;. (optional, default to false)
     * @param radiuses A pipe (&#x60;|&#x60;) delimited list of maximum distances (measured in meters) that limit the search of nearby road segments to every given waypoint. The values must be greater than &#x60;0&#x60;, the value of &#x60;-1&#x60; specifies no limit in the search. The number of radiuses correspond to the number of waypoints.  (optional)
     * @param bearings Specifies a pipe (|) delimited list of pairs (bearings and deviations) to filter the segments of the road network a waypoint can snap to. For example &#x60;bearings&#x3D;45,10|120,20&#x60;.  Each pair is a comma-separated list that can consist of one or two float values, where the first value is the bearing and the second one is the allowed deviation from the bearing. The bearing can take values between &#x60;0&#x60; and &#x60;360&#x60; clockwise from true north. If the deviation is not set, then the default value of &#x60;100&#x60; degrees is used. The number of pairs must correspond to the number of waypoints.  Setting &#x60;optimized&#x3D;false&#x60; is mandatory for this feature to work for all profiles. The number of bearings corresponds to the length of waypoints-1 or waypoints. If the bearing information for the last waypoint is given, then this will control the sector from which the destination waypoint may be reached. You can skip a bearing for a certain waypoint by passing an empty value for a pair, e.g. 30,20||40,20.  (optional)
     * @param continueStraight Forces the route to keep going straight at waypoints restricting uturns there even if it would be faster. This setting will work for all profiles except for &#x60;driving-*&#x60;. In this case you will have to set &#x60;optimized&#x3D;false&#x60; for it to work. &#x60;false&#x60; by default (optional, default to false)
     * @param elevation Specifies whether to return elevation values for points. Please note that elevation also gets encoded for &#x60;geometry_format&#x3D;encodedpolyline&#x60;. (optional, default to false)
     * @param extraInfo Pipe (|) separated List of additional information. Returns information on [steepness](https://github.com/GIScience/openrouteservice-docs/blob/master/README.md#steepness), [suitability](https://github.com/GIScience/openrouteservice-docs/blob/master/README.md#suitability), [surface](https://github.com/GIScience/openrouteservice-docs/blob/master/README.md#surface), [waycategory](https://github.com/GIScience/openrouteservice-docs/blob/master/README.md#waycategory), [waytype](https://github.com/GIScience/openrouteservice-docs/blob/master/README.md#waytype), [tollways](https://github.com/GIScience/openrouteservice-docs/blob/master/README.md#tollways) or [trail difficulty](https://github.com/GIScience/openrouteservice-docs/blob/master/README.md#trail-difficulty)  (optional)
     * @param optimized Uses contraction hierarchies if available (&#x60;false&#x60;). &#x60;true&#x60; by default  (optional, default to true)
     * @param options For advanced options formatted as json object. For structure refer to the **options model** below. The available parameters are:     - &#x60;maximum_speed&#x60; : Specifies a maximum travel speed restriction in km/h.     - &#x60;avoid_features&#x60; : Pipe (|) seperated list of features to avoid.     The available features are :        |     Feature    | Available for                               |       |:--------------:|---------------------------------------------|       | &#x60;highways&#x60;     | driving-*                                   |       | &#x60;tollways&#x60;     | driving-*                                   |       | &#x60;ferries&#x60;      | driving-\\*, cycling-\\*, foot-\\*, wheelchair |       | &#x60;tunnels&#x60;      | driving-*                                   |       | &#x60;pavedroads&#x60;   | driving-\\*, cycling-*                       |       | &#x60;unpavedroads&#x60; | driving-\\*, cycling-*                       |       | &#x60;tracks&#x60;       | driving-*                                   |       | &#x60;fords&#x60;        | driving-\\*, cycling-\\*, foot-*              |       | &#x60;steps&#x60;        | cycling-\\*, foot-\\*, wheelchair             |       | &#x60;hills&#x60;        | cycling-\\*, foot-\\*                         |     - &#x60;vehicle_type&#x60; (for &#x60;profile&#x3D;driving-hgv&#x60; only): &#x60;hgv&#x60;,&#x60;bus&#x60;,&#x60;agricultural&#x60;,&#x60;delivery&#x60;,&#x60;forestry&#x60; and &#x60;goods&#x60;. It is needed for **vehicle restrictions** to work.     - &#x60;profile_params&#x60; : Specifies additional routing parameters.     - &#x60;weightings&#x60;: Weightings will prioritize specified factors over the shortest path.       - &#x60;steepness_difficulty&#x60;: Specifies the fitness level for &#x60;cycling-*&#x60; profiles.         - &#x60;level&#x60;: &#x60;0&#x60; &#x3D; Novice, &#x60;1&#x60; &#x3D; Moderate, &#x60;2&#x60; &#x3D; Amateur, &#x60;3&#x60; &#x3D; Pro. The prefered gradient increases with level        - &#x60;green&#x60;: Specifies the Green factor for &#x60;foot-*&#x60; profiles.         - &#x60;factor&#x60;: Values range from &#x60;0&#x60; to &#x60;1&#x60;. &#x60;0&#x60; equals normal routing. &#x60;1&#x60; will prefer ways through green areas over a shorter route.        - &#x60;quiet&#x60;: Specifies the Quiet factor for &#x60;foot-*&#x60; profiles.         - &#x60;factor&#x60;: Values range from &#x60;0&#x60; to &#x60;1&#x60;. &#x60;0&#x60; equals normal routing. &#x60;1&#x60; will prefer quiet ways over a shorter route.      - &#x60;restrictions&#x60; : Specifies restrictions for &#x60;driving-hgv&#x60;, &#x60;wheelchair&#x60; or &#x60;cycling-*&#x60; profiles.       - for &#x60;cycling-*&#x60;:                       |  Parameter | Description                                                                                                                                                                               |           |:----------:|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|           | &#x60;gradient&#x60; | Only for avoided &#x60;hills&#x60; or specified &#x60;steepness_difficulty&#x60;. Specifies the maximum route steepness in percent. Values range from &#x60;1&#x60; to &#x60;15&#x60;. Routes with a higher gradient are avoided. |        - for &#x60;driving-hgv&#x60;:          _(you have to specify the &#x60;vehicle_type&#x60; in the options for these parameters)_            |  Parameter | Description                                                                                                                       |           |:----------:|-----------------------------------------------------------------------------------------------------------------------------------|           | &#x60;length&#x60;   | Length restriction in meters.                                                                                                     |           | &#x60;width&#x60;    | Width restriction in meters.                                                                                                      |           | &#x60;height&#x60;   | Height restriction in meters.                                                                                                     |           | &#x60;axleload&#x60; | Axleload restriction in tons.                                                                                                     |           | &#x60;weight&#x60;   | Weight restriction in tons.                                                                                                       |           | &#x60;hazmat&#x60;   | Specifies whether to use appropriate routing for delivering hazardous goods and avoiding water protected areas. Default is false. |        - for &#x60;wheelchair&#x60;:          |       Parameter       | Description                                                                                                                 |         |:---------------------:|-----------------------------------------------------------------------------------------------------------------------------|         |     &#x60;surface_type&#x60;    | Specifies the minimum [surface type](http://wiki.openstreetmap.org/wiki/Key:surface). Default is &#x60;\&quot;cobblestone:flattened\&quot;&#x60;. |         |      &#x60;track_type&#x60;     | Specifies the minimum [grade](http://wiki.openstreetmap.org/wiki/Key:tracktype) of the route. Default is &#x60;\&quot;grade1\&quot;&#x60;.        |         |   &#x60;smoothness_type&#x60;   | Specifies the minimum [smoothness](http://wiki.openstreetmap.org/wiki/Key:smoothness) of the route. Default is &#x60;\&quot;good\&quot;&#x60;.    |         | &#x60;maximum_sloped_curb&#x60; | Specifies the maximum height of the sloped curb in meters. Values are &#x60;0.03&#x60;, &#x60;0.06&#x60;(default), &#x60;0.1&#x60; or &#x60;any&#x60;.              |         |   &#x60;maximum_incline&#x60;   | Specifies the maximum incline as a percentage. &#x60;3&#x60;, &#x60;6&#x60;(default), &#x60;10&#x60;, &#x60;15&#x60; or &#x60;any&#x60;.                                      |     - &#x60;avoid_polygons&#x60; : Comprises areas to be avoided for the route. Formatted as [geojson polygon](http://geojson.org/geojson-spec.html#id4) or [geojson multipolygon](http://geojson.org/geojson-spec.html#id7).  This is an example options object for a &#x60;cycling-*&#x60; profile:  &#x60;&#x60;&#x60;json {   \&quot;maximum_speed\&quot;: 10,   \&quot;avoid_features\&quot;: \&quot;unpavedroads\&quot;,   \&quot;profile_params\&quot;: {     \&quot;weightings\&quot;: {       \&quot;steepness_difficulty\&quot;: {         \&quot;level\&quot;: 1       },       \&quot;green\&quot;: {         \&quot;factor\&quot;: 0.8       },       \&quot;quiet\&quot;: {         \&quot;factor\&quot;: 1.0       }     },     \&quot;restrictions\&quot;: {       \&quot;gradient\&quot;: 5     }   },   \&quot;avoid_polygons\&quot;: {     \&quot;type\&quot;: \&quot;Polygon\&quot;,     \&quot;coordinates\&quot;: [                     [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0] ]    ]} } &#x60;&#x60;&#x60; The minified form(for copy paste purposes):  &#x60;{\&quot;maximum_speed\&quot;:10,\&quot;avoid_features\&quot;:\&quot;unpavedroads\&quot;,\&quot;profile_params\&quot;:{\&quot;weightings\&quot;:{\&quot;steepness_difficulty\&quot;:{\&quot;level\&quot;:1},\&quot;green\&quot;:{\&quot;factor\&quot;:0.8},\&quot;quiet\&quot;:{\&quot;factor\&quot;:1.0}},\&quot;restrictions\&quot;:{\&quot;gradient\&quot;:5}},\&quot;avoid_polygons\&quot;:{\&quot;type\&quot;:\&quot;Polygon\&quot;,\&quot;coordinates\&quot;:[[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]]]}}&#x60;  More examples can be found [here](https://github.com/GIScience/openrouteservice-docs#examples).  (optional, default to {})
     * @param id Arbitrary identification string of the request reflected in the meta information. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call directionsGetAsync(List<String> coordinates, String profile, String preference, String units, String language, Boolean geometry, String geometryFormat, Boolean geometrySimplify, Boolean instructions, String instructionsFormat, Boolean roundaboutExits, List<String> attributes, Boolean maneuvers, List<Float> radiuses, List<String> bearings, Boolean continueStraight, Boolean elevation, List<String> extraInfo, Boolean optimized, String options, String id, final ApiCallback<Routeresponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = directionsGetValidateBeforeCall(coordinates, profile, preference, units, language, geometry, geometryFormat, geometrySimplify, instructions, instructionsFormat, roundaboutExits, attributes, maneuvers, radiuses, bearings, continueStraight, elevation, extraInfo, optimized, options, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Routeresponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
