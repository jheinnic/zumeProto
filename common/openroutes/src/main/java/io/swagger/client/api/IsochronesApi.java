

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Error;
import io.swagger.client.model.IsochronesResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IsochronesApi {
    private ApiClient apiClient;

    public IsochronesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IsochronesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for isochronesGet
     * @param locations List of longitude, latitude coordinates delimited with pipe (|).  Example values:   &#x60;8.34234,48.23424&#x60;  (required)
     * @param range Maximum range value of the analysis in **seconds** for time and **meters** for distance. Alternatively a comma separated list of specific single range values.  (required)
     * @param profile Specifies the routing profile. (optional, default to driving-car)
     * @param rangeType Set _time_ for isochrones or _distance_ for equidistants.  (optional, default to time)
     * @param interval Interval of isochrones or equidistants for one range value. value in **seconds** for time and **meters** for distance.  (optional)
     * @param units Unit format for  &#x60;range_type&#x3D;distance&#x60;.  (optional)
     * @param locationType start(default) treats the location(s) as starting point, destination as goal.  (optional, default to start)
     * @param attributes Values are area and reachfactor. Delimit with pipe (|) for both. &#x60;area&#x60; returns the area of each polygon in its feature properties. &#x60;reachfactor&#x60; returns a reachability score between 0 and 1.  (optional)
     * @param options For advanced options formatted as json object. For structure refer to the **options model** below. The available parameters are:     - &#x60;maximum_speed&#x60; : Specifies a maximum travel speed restriction in km/h.     - &#x60;avoid_features&#x60; : Pipe (|) seperated list of features to avoid.     The available features are :        |     Feature    | Available for                               |       |:--------------:|---------------------------------------------|       | &#x60;highways&#x60;     | driving-*                                   |       | &#x60;tollways&#x60;     | driving-*                                   |       | &#x60;ferries&#x60;      | driving-\\*, cycling-\\*, foot-\\*, wheelchair |       | &#x60;tunnels&#x60;      | driving-*                                   |       | &#x60;pavedroads&#x60;   | driving-\\*, cycling-*                       |       | &#x60;unpavedroads&#x60; | driving-\\*, cycling-*                       |       | &#x60;tracks&#x60;       | driving-*                                   |       | &#x60;fords&#x60;        | driving-\\*, cycling-\\*, foot-*              |       | &#x60;steps&#x60;        | cycling-\\*, foot-\\*, wheelchair             |       | &#x60;hills&#x60;        | cycling-\\*, foot-\\*                         |     - &#x60;vehicle_type&#x60; (for &#x60;profile&#x3D;driving-hgv&#x60; only): &#x60;hgv&#x60;,&#x60;bus&#x60;,&#x60;agricultural&#x60;,&#x60;delivery&#x60;,&#x60;forestry&#x60; and &#x60;goods&#x60;. It is needed for **vehicle restrictions** to work.     - &#x60;profile_params&#x60; : Specifies additional routing parameters.     - &#x60;weightings&#x60;: Weightings will prioritize specified factors over the shortest path.       - &#x60;steepness_difficulty&#x60;: Specifies the fitness level for &#x60;cycling-*&#x60; profiles.         - &#x60;level&#x60;: &#x60;0&#x60; &#x3D; Novice, &#x60;1&#x60; &#x3D; Moderate, &#x60;2&#x60; &#x3D; Amateur, &#x60;3&#x60; &#x3D; Pro. The prefered gradient increases with level        - &#x60;green&#x60;: Specifies the Green factor for &#x60;foot-*&#x60; profiles.         - &#x60;factor&#x60;: Values range from &#x60;0&#x60; to &#x60;1&#x60;. &#x60;0&#x60; equals normal routing. &#x60;1&#x60; will prefer ways through green areas over a shorter route.        - &#x60;quiet&#x60;: Specifies the Quiet factor for &#x60;foot-*&#x60; profiles.         - &#x60;factor&#x60;: Values range from &#x60;0&#x60; to &#x60;1&#x60;. &#x60;0&#x60; equals normal routing. &#x60;1&#x60; will prefer quiet ways over a shorter route.      - &#x60;restrictions&#x60; : Specifies restrictions for &#x60;driving-hgv&#x60;, &#x60;wheelchair&#x60; or &#x60;cycling-*&#x60; profiles.       - for &#x60;cycling-*&#x60;:                       |  Parameter | Description                                                                                                                                                                               |           |:----------:|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|           | &#x60;gradient&#x60; | Only for avoided &#x60;hills&#x60; or specified &#x60;steepness_difficulty&#x60;. Specifies the maximum route steepness in percent. Values range from &#x60;1&#x60; to &#x60;15&#x60;. Routes with a higher gradient are avoided. |        - for &#x60;driving-hgv&#x60;:          _(you have to specify the &#x60;vehicle_type&#x60; in the options for these parameters)_                  |  Parameter | Description                                                                                                                       |           |:----------:|-----------------------------------------------------------------------------------------------------------------------------------|           | &#x60;length&#x60;   | Length restriction in meters.                                                                                                     |           | &#x60;width&#x60;    | Width restriction in meters.                                                                                                      |           | &#x60;height&#x60;   | Height restriction in meters.                                                                                                     |           | &#x60;axleload&#x60; | Axleload restriction in tons.                                                                                                     |           | &#x60;weight&#x60;   | Weight restriction in tons.                                                                                                       |           | &#x60;hazmat&#x60;   | Specifies whether to use appropriate routing for delivering hazardous goods and avoiding water protected areas. Default is false. |        - for &#x60;wheelchair&#x60;:          |       Parameter       | Description                                                                                                         |         |:---------------------:|---------------------------------------------------------------------------------------------------------------------|         |     &#x60;surface_type&#x60;    | Specifies the [surface type](http://wiki.openstreetmap.org/wiki/Key:surface). Default is &#x60;\&quot;cobblestone:flattened\&quot;&#x60;. |         |      &#x60;track_type&#x60;     | Specifies the [grade](http://wiki.openstreetmap.org/wiki/Key:tracktype) of the route. Default is &#x60;\&quot;grade1\&quot;&#x60;.        |         |   &#x60;smoothness_type&#x60;   | Specifies the [smoothness](http://wiki.openstreetmap.org/wiki/Key:smoothness) of the route. Default is &#x60;\&quot;good\&quot;&#x60;.    |         | &#x60;maximum_sloped_curb&#x60; | Specifies the maximum height of the sloped curb in meters. Values are &#x60;0.03&#x60;, &#x60;0.06&#x60;(default), &#x60;0.1&#x60; or &#x60;any&#x60;.      |         |   &#x60;maximum_incline&#x60;   | Specifies the maximum incline as a percentage. &#x60;3&#x60;, &#x60;6&#x60;(default), &#x60;10&#x60;, &#x60;15&#x60; or &#x60;any&#x60;.                              |     - &#x60;avoid_polygons&#x60; : Comprises areas to be avoided for the route. Formatted as [geojson polygon](http://geojson.org/geojson-spec.html#id4) or [geojson multipolygon](http://geojson.org/geojson-spec.html#id7).  This is an example options object for a &#x60;cycling-*&#x60; profile:  &#x60;&#x60;&#x60;json {   \&quot;maximum_speed\&quot;: 10,   \&quot;avoid_features\&quot;: \&quot;unpavedroads\&quot;,   \&quot;profile_params\&quot;: {     \&quot;weightings\&quot;: {       \&quot;steepness_difficulty\&quot;: {         \&quot;level\&quot;: 1       },       \&quot;green\&quot;: {         \&quot;factor\&quot;: 0.8       },       \&quot;quiet\&quot;: {         \&quot;factor\&quot;: 1.0       }     },     \&quot;restrictions\&quot;: {       \&quot;gradient\&quot;: 5     }   },   \&quot;avoid_polygons\&quot;: {     \&quot;type\&quot;: \&quot;Polygon\&quot;,     \&quot;coordinates\&quot;: [                     [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0] ]    ]} } &#x60;&#x60;&#x60; The minified form(for copy paste purposes):  &#x60;{\&quot;maximum_speed\&quot;:10,\&quot;avoid_features\&quot;:\&quot;unpavedroads\&quot;,\&quot;profile_params\&quot;:{\&quot;weightings\&quot;:{\&quot;steepness_difficulty\&quot;:{\&quot;level\&quot;:1},\&quot;green\&quot;:{\&quot;factor\&quot;:0.8},\&quot;quiet\&quot;:{\&quot;factor\&quot;:1.0}},\&quot;restrictions\&quot;:{\&quot;gradient\&quot;:5}},\&quot;avoid_polygons\&quot;:{\&quot;type\&quot;:\&quot;Polygon\&quot;,\&quot;coordinates\&quot;:[[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]]]}}&#x60;  More examples can be found [here](https://github.com/GIScience/openrouteservice-docs#examples).  (optional)
     * @param intersections Specifies whether to return intersection polygons.  (optional, default to false)
     * @param id Arbitrary identification string of the request reflected in the meta information. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call isochronesGetCall(List<String> locations, Double range, String profile, String rangeType, Double interval, String units, String locationType, List<String> attributes, String options, Boolean intersections, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/isochrones";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (locations != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("pipes", "locations", locations));
        if (profile != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("profile", profile));
        if (rangeType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("range_type", rangeType));
        if (range != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("range", range));
        if (interval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("interval", interval));
        if (units != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("units", units));
        if (locationType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("location_type", locationType));
        if (attributes != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("pipes", "attributes", attributes));
        if (options != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("options", options));
        if (intersections != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("intersections", intersections));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/json; charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "UserSecurity" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call isochronesGetValidateBeforeCall(List<String> locations, Double range, String profile, String rangeType, Double interval, String units, String locationType, List<String> attributes, String options, Boolean intersections, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'locations' is set
        if (locations == null) {
            throw new ApiException("Missing the required parameter 'locations' when calling isochronesGet(Async)");
        }
        
        // verify the required parameter 'range' is set
        if (range == null) {
            throw new ApiException("Missing the required parameter 'range' when calling isochronesGet(Async)");
        }
        

        com.squareup.okhttp.Call call = isochronesGetCall(locations, range, profile, rangeType, interval, units, locationType, attributes, options, intersections, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Isochrones Service
     * The Isochrone Service supports time and distance analyses for one single or multiple locations. You may also specify the isochrone interval or provide multiple exact isochrone range values. This service allows the same range of profile options listed in the ORS Routing section which help you to further customize your request to obtain a more detailed reachability area response. 
     * @param locations List of longitude, latitude coordinates delimited with pipe (|).  Example values:   &#x60;8.34234,48.23424&#x60;  (required)
     * @param range Maximum range value of the analysis in **seconds** for time and **meters** for distance. Alternatively a comma separated list of specific single range values.  (required)
     * @param profile Specifies the routing profile. (optional, default to driving-car)
     * @param rangeType Set _time_ for isochrones or _distance_ for equidistants.  (optional, default to time)
     * @param interval Interval of isochrones or equidistants for one range value. value in **seconds** for time and **meters** for distance.  (optional)
     * @param units Unit format for  &#x60;range_type&#x3D;distance&#x60;.  (optional)
     * @param locationType start(default) treats the location(s) as starting point, destination as goal.  (optional, default to start)
     * @param attributes Values are area and reachfactor. Delimit with pipe (|) for both. &#x60;area&#x60; returns the area of each polygon in its feature properties. &#x60;reachfactor&#x60; returns a reachability score between 0 and 1.  (optional)
     * @param options For advanced options formatted as json object. For structure refer to the **options model** below. The available parameters are:     - &#x60;maximum_speed&#x60; : Specifies a maximum travel speed restriction in km/h.     - &#x60;avoid_features&#x60; : Pipe (|) seperated list of features to avoid.     The available features are :        |     Feature    | Available for                               |       |:--------------:|---------------------------------------------|       | &#x60;highways&#x60;     | driving-*                                   |       | &#x60;tollways&#x60;     | driving-*                                   |       | &#x60;ferries&#x60;      | driving-\\*, cycling-\\*, foot-\\*, wheelchair |       | &#x60;tunnels&#x60;      | driving-*                                   |       | &#x60;pavedroads&#x60;   | driving-\\*, cycling-*                       |       | &#x60;unpavedroads&#x60; | driving-\\*, cycling-*                       |       | &#x60;tracks&#x60;       | driving-*                                   |       | &#x60;fords&#x60;        | driving-\\*, cycling-\\*, foot-*              |       | &#x60;steps&#x60;        | cycling-\\*, foot-\\*, wheelchair             |       | &#x60;hills&#x60;        | cycling-\\*, foot-\\*                         |     - &#x60;vehicle_type&#x60; (for &#x60;profile&#x3D;driving-hgv&#x60; only): &#x60;hgv&#x60;,&#x60;bus&#x60;,&#x60;agricultural&#x60;,&#x60;delivery&#x60;,&#x60;forestry&#x60; and &#x60;goods&#x60;. It is needed for **vehicle restrictions** to work.     - &#x60;profile_params&#x60; : Specifies additional routing parameters.     - &#x60;weightings&#x60;: Weightings will prioritize specified factors over the shortest path.       - &#x60;steepness_difficulty&#x60;: Specifies the fitness level for &#x60;cycling-*&#x60; profiles.         - &#x60;level&#x60;: &#x60;0&#x60; &#x3D; Novice, &#x60;1&#x60; &#x3D; Moderate, &#x60;2&#x60; &#x3D; Amateur, &#x60;3&#x60; &#x3D; Pro. The prefered gradient increases with level        - &#x60;green&#x60;: Specifies the Green factor for &#x60;foot-*&#x60; profiles.         - &#x60;factor&#x60;: Values range from &#x60;0&#x60; to &#x60;1&#x60;. &#x60;0&#x60; equals normal routing. &#x60;1&#x60; will prefer ways through green areas over a shorter route.        - &#x60;quiet&#x60;: Specifies the Quiet factor for &#x60;foot-*&#x60; profiles.         - &#x60;factor&#x60;: Values range from &#x60;0&#x60; to &#x60;1&#x60;. &#x60;0&#x60; equals normal routing. &#x60;1&#x60; will prefer quiet ways over a shorter route.      - &#x60;restrictions&#x60; : Specifies restrictions for &#x60;driving-hgv&#x60;, &#x60;wheelchair&#x60; or &#x60;cycling-*&#x60; profiles.       - for &#x60;cycling-*&#x60;:                       |  Parameter | Description                                                                                                                                                                               |           |:----------:|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|           | &#x60;gradient&#x60; | Only for avoided &#x60;hills&#x60; or specified &#x60;steepness_difficulty&#x60;. Specifies the maximum route steepness in percent. Values range from &#x60;1&#x60; to &#x60;15&#x60;. Routes with a higher gradient are avoided. |        - for &#x60;driving-hgv&#x60;:          _(you have to specify the &#x60;vehicle_type&#x60; in the options for these parameters)_                  |  Parameter | Description                                                                                                                       |           |:----------:|-----------------------------------------------------------------------------------------------------------------------------------|           | &#x60;length&#x60;   | Length restriction in meters.                                                                                                     |           | &#x60;width&#x60;    | Width restriction in meters.                                                                                                      |           | &#x60;height&#x60;   | Height restriction in meters.                                                                                                     |           | &#x60;axleload&#x60; | Axleload restriction in tons.                                                                                                     |           | &#x60;weight&#x60;   | Weight restriction in tons.                                                                                                       |           | &#x60;hazmat&#x60;   | Specifies whether to use appropriate routing for delivering hazardous goods and avoiding water protected areas. Default is false. |        - for &#x60;wheelchair&#x60;:          |       Parameter       | Description                                                                                                         |         |:---------------------:|---------------------------------------------------------------------------------------------------------------------|         |     &#x60;surface_type&#x60;    | Specifies the [surface type](http://wiki.openstreetmap.org/wiki/Key:surface). Default is &#x60;\&quot;cobblestone:flattened\&quot;&#x60;. |         |      &#x60;track_type&#x60;     | Specifies the [grade](http://wiki.openstreetmap.org/wiki/Key:tracktype) of the route. Default is &#x60;\&quot;grade1\&quot;&#x60;.        |         |   &#x60;smoothness_type&#x60;   | Specifies the [smoothness](http://wiki.openstreetmap.org/wiki/Key:smoothness) of the route. Default is &#x60;\&quot;good\&quot;&#x60;.    |         | &#x60;maximum_sloped_curb&#x60; | Specifies the maximum height of the sloped curb in meters. Values are &#x60;0.03&#x60;, &#x60;0.06&#x60;(default), &#x60;0.1&#x60; or &#x60;any&#x60;.      |         |   &#x60;maximum_incline&#x60;   | Specifies the maximum incline as a percentage. &#x60;3&#x60;, &#x60;6&#x60;(default), &#x60;10&#x60;, &#x60;15&#x60; or &#x60;any&#x60;.                              |     - &#x60;avoid_polygons&#x60; : Comprises areas to be avoided for the route. Formatted as [geojson polygon](http://geojson.org/geojson-spec.html#id4) or [geojson multipolygon](http://geojson.org/geojson-spec.html#id7).  This is an example options object for a &#x60;cycling-*&#x60; profile:  &#x60;&#x60;&#x60;json {   \&quot;maximum_speed\&quot;: 10,   \&quot;avoid_features\&quot;: \&quot;unpavedroads\&quot;,   \&quot;profile_params\&quot;: {     \&quot;weightings\&quot;: {       \&quot;steepness_difficulty\&quot;: {         \&quot;level\&quot;: 1       },       \&quot;green\&quot;: {         \&quot;factor\&quot;: 0.8       },       \&quot;quiet\&quot;: {         \&quot;factor\&quot;: 1.0       }     },     \&quot;restrictions\&quot;: {       \&quot;gradient\&quot;: 5     }   },   \&quot;avoid_polygons\&quot;: {     \&quot;type\&quot;: \&quot;Polygon\&quot;,     \&quot;coordinates\&quot;: [                     [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0] ]    ]} } &#x60;&#x60;&#x60; The minified form(for copy paste purposes):  &#x60;{\&quot;maximum_speed\&quot;:10,\&quot;avoid_features\&quot;:\&quot;unpavedroads\&quot;,\&quot;profile_params\&quot;:{\&quot;weightings\&quot;:{\&quot;steepness_difficulty\&quot;:{\&quot;level\&quot;:1},\&quot;green\&quot;:{\&quot;factor\&quot;:0.8},\&quot;quiet\&quot;:{\&quot;factor\&quot;:1.0}},\&quot;restrictions\&quot;:{\&quot;gradient\&quot;:5}},\&quot;avoid_polygons\&quot;:{\&quot;type\&quot;:\&quot;Polygon\&quot;,\&quot;coordinates\&quot;:[[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]]]}}&#x60;  More examples can be found [here](https://github.com/GIScience/openrouteservice-docs#examples).  (optional)
     * @param intersections Specifies whether to return intersection polygons.  (optional, default to false)
     * @param id Arbitrary identification string of the request reflected in the meta information. (optional)
     * @return IsochronesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IsochronesResponse isochronesGet(List<String> locations, Double range, String profile, String rangeType, Double interval, String units, String locationType, List<String> attributes, String options, Boolean intersections, String id) throws ApiException {
        ApiResponse<IsochronesResponse> resp = isochronesGetWithHttpInfo(locations, range, profile, rangeType, interval, units, locationType, attributes, options, intersections, id);
        return resp.getData();
    }

    /**
     * Isochrones Service
     * The Isochrone Service supports time and distance analyses for one single or multiple locations. You may also specify the isochrone interval or provide multiple exact isochrone range values. This service allows the same range of profile options listed in the ORS Routing section which help you to further customize your request to obtain a more detailed reachability area response. 
     * @param locations List of longitude, latitude coordinates delimited with pipe (|).  Example values:   &#x60;8.34234,48.23424&#x60;  (required)
     * @param range Maximum range value of the analysis in **seconds** for time and **meters** for distance. Alternatively a comma separated list of specific single range values.  (required)
     * @param profile Specifies the routing profile. (optional, default to driving-car)
     * @param rangeType Set _time_ for isochrones or _distance_ for equidistants.  (optional, default to time)
     * @param interval Interval of isochrones or equidistants for one range value. value in **seconds** for time and **meters** for distance.  (optional)
     * @param units Unit format for  &#x60;range_type&#x3D;distance&#x60;.  (optional)
     * @param locationType start(default) treats the location(s) as starting point, destination as goal.  (optional, default to start)
     * @param attributes Values are area and reachfactor. Delimit with pipe (|) for both. &#x60;area&#x60; returns the area of each polygon in its feature properties. &#x60;reachfactor&#x60; returns a reachability score between 0 and 1.  (optional)
     * @param options For advanced options formatted as json object. For structure refer to the **options model** below. The available parameters are:     - &#x60;maximum_speed&#x60; : Specifies a maximum travel speed restriction in km/h.     - &#x60;avoid_features&#x60; : Pipe (|) seperated list of features to avoid.     The available features are :        |     Feature    | Available for                               |       |:--------------:|---------------------------------------------|       | &#x60;highways&#x60;     | driving-*                                   |       | &#x60;tollways&#x60;     | driving-*                                   |       | &#x60;ferries&#x60;      | driving-\\*, cycling-\\*, foot-\\*, wheelchair |       | &#x60;tunnels&#x60;      | driving-*                                   |       | &#x60;pavedroads&#x60;   | driving-\\*, cycling-*                       |       | &#x60;unpavedroads&#x60; | driving-\\*, cycling-*                       |       | &#x60;tracks&#x60;       | driving-*                                   |       | &#x60;fords&#x60;        | driving-\\*, cycling-\\*, foot-*              |       | &#x60;steps&#x60;        | cycling-\\*, foot-\\*, wheelchair             |       | &#x60;hills&#x60;        | cycling-\\*, foot-\\*                         |     - &#x60;vehicle_type&#x60; (for &#x60;profile&#x3D;driving-hgv&#x60; only): &#x60;hgv&#x60;,&#x60;bus&#x60;,&#x60;agricultural&#x60;,&#x60;delivery&#x60;,&#x60;forestry&#x60; and &#x60;goods&#x60;. It is needed for **vehicle restrictions** to work.     - &#x60;profile_params&#x60; : Specifies additional routing parameters.     - &#x60;weightings&#x60;: Weightings will prioritize specified factors over the shortest path.       - &#x60;steepness_difficulty&#x60;: Specifies the fitness level for &#x60;cycling-*&#x60; profiles.         - &#x60;level&#x60;: &#x60;0&#x60; &#x3D; Novice, &#x60;1&#x60; &#x3D; Moderate, &#x60;2&#x60; &#x3D; Amateur, &#x60;3&#x60; &#x3D; Pro. The prefered gradient increases with level        - &#x60;green&#x60;: Specifies the Green factor for &#x60;foot-*&#x60; profiles.         - &#x60;factor&#x60;: Values range from &#x60;0&#x60; to &#x60;1&#x60;. &#x60;0&#x60; equals normal routing. &#x60;1&#x60; will prefer ways through green areas over a shorter route.        - &#x60;quiet&#x60;: Specifies the Quiet factor for &#x60;foot-*&#x60; profiles.         - &#x60;factor&#x60;: Values range from &#x60;0&#x60; to &#x60;1&#x60;. &#x60;0&#x60; equals normal routing. &#x60;1&#x60; will prefer quiet ways over a shorter route.      - &#x60;restrictions&#x60; : Specifies restrictions for &#x60;driving-hgv&#x60;, &#x60;wheelchair&#x60; or &#x60;cycling-*&#x60; profiles.       - for &#x60;cycling-*&#x60;:                       |  Parameter | Description                                                                                                                                                                               |           |:----------:|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|           | &#x60;gradient&#x60; | Only for avoided &#x60;hills&#x60; or specified &#x60;steepness_difficulty&#x60;. Specifies the maximum route steepness in percent. Values range from &#x60;1&#x60; to &#x60;15&#x60;. Routes with a higher gradient are avoided. |        - for &#x60;driving-hgv&#x60;:          _(you have to specify the &#x60;vehicle_type&#x60; in the options for these parameters)_                  |  Parameter | Description                                                                                                                       |           |:----------:|-----------------------------------------------------------------------------------------------------------------------------------|           | &#x60;length&#x60;   | Length restriction in meters.                                                                                                     |           | &#x60;width&#x60;    | Width restriction in meters.                                                                                                      |           | &#x60;height&#x60;   | Height restriction in meters.                                                                                                     |           | &#x60;axleload&#x60; | Axleload restriction in tons.                                                                                                     |           | &#x60;weight&#x60;   | Weight restriction in tons.                                                                                                       |           | &#x60;hazmat&#x60;   | Specifies whether to use appropriate routing for delivering hazardous goods and avoiding water protected areas. Default is false. |        - for &#x60;wheelchair&#x60;:          |       Parameter       | Description                                                                                                         |         |:---------------------:|---------------------------------------------------------------------------------------------------------------------|         |     &#x60;surface_type&#x60;    | Specifies the [surface type](http://wiki.openstreetmap.org/wiki/Key:surface). Default is &#x60;\&quot;cobblestone:flattened\&quot;&#x60;. |         |      &#x60;track_type&#x60;     | Specifies the [grade](http://wiki.openstreetmap.org/wiki/Key:tracktype) of the route. Default is &#x60;\&quot;grade1\&quot;&#x60;.        |         |   &#x60;smoothness_type&#x60;   | Specifies the [smoothness](http://wiki.openstreetmap.org/wiki/Key:smoothness) of the route. Default is &#x60;\&quot;good\&quot;&#x60;.    |         | &#x60;maximum_sloped_curb&#x60; | Specifies the maximum height of the sloped curb in meters. Values are &#x60;0.03&#x60;, &#x60;0.06&#x60;(default), &#x60;0.1&#x60; or &#x60;any&#x60;.      |         |   &#x60;maximum_incline&#x60;   | Specifies the maximum incline as a percentage. &#x60;3&#x60;, &#x60;6&#x60;(default), &#x60;10&#x60;, &#x60;15&#x60; or &#x60;any&#x60;.                              |     - &#x60;avoid_polygons&#x60; : Comprises areas to be avoided for the route. Formatted as [geojson polygon](http://geojson.org/geojson-spec.html#id4) or [geojson multipolygon](http://geojson.org/geojson-spec.html#id7).  This is an example options object for a &#x60;cycling-*&#x60; profile:  &#x60;&#x60;&#x60;json {   \&quot;maximum_speed\&quot;: 10,   \&quot;avoid_features\&quot;: \&quot;unpavedroads\&quot;,   \&quot;profile_params\&quot;: {     \&quot;weightings\&quot;: {       \&quot;steepness_difficulty\&quot;: {         \&quot;level\&quot;: 1       },       \&quot;green\&quot;: {         \&quot;factor\&quot;: 0.8       },       \&quot;quiet\&quot;: {         \&quot;factor\&quot;: 1.0       }     },     \&quot;restrictions\&quot;: {       \&quot;gradient\&quot;: 5     }   },   \&quot;avoid_polygons\&quot;: {     \&quot;type\&quot;: \&quot;Polygon\&quot;,     \&quot;coordinates\&quot;: [                     [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0] ]    ]} } &#x60;&#x60;&#x60; The minified form(for copy paste purposes):  &#x60;{\&quot;maximum_speed\&quot;:10,\&quot;avoid_features\&quot;:\&quot;unpavedroads\&quot;,\&quot;profile_params\&quot;:{\&quot;weightings\&quot;:{\&quot;steepness_difficulty\&quot;:{\&quot;level\&quot;:1},\&quot;green\&quot;:{\&quot;factor\&quot;:0.8},\&quot;quiet\&quot;:{\&quot;factor\&quot;:1.0}},\&quot;restrictions\&quot;:{\&quot;gradient\&quot;:5}},\&quot;avoid_polygons\&quot;:{\&quot;type\&quot;:\&quot;Polygon\&quot;,\&quot;coordinates\&quot;:[[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]]]}}&#x60;  More examples can be found [here](https://github.com/GIScience/openrouteservice-docs#examples).  (optional)
     * @param intersections Specifies whether to return intersection polygons.  (optional, default to false)
     * @param id Arbitrary identification string of the request reflected in the meta information. (optional)
     * @return ApiResponse&lt;IsochronesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IsochronesResponse> isochronesGetWithHttpInfo(List<String> locations, Double range, String profile, String rangeType, Double interval, String units, String locationType, List<String> attributes, String options, Boolean intersections, String id) throws ApiException {
        com.squareup.okhttp.Call call = isochronesGetValidateBeforeCall(locations, range, profile, rangeType, interval, units, locationType, attributes, options, intersections, id, null, null);
        Type localVarReturnType = new TypeToken<IsochronesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Isochrones Service (asynchronously)
     * The Isochrone Service supports time and distance analyses for one single or multiple locations. You may also specify the isochrone interval or provide multiple exact isochrone range values. This service allows the same range of profile options listed in the ORS Routing section which help you to further customize your request to obtain a more detailed reachability area response. 
     * @param locations List of longitude, latitude coordinates delimited with pipe (|).  Example values:   &#x60;8.34234,48.23424&#x60;  (required)
     * @param range Maximum range value of the analysis in **seconds** for time and **meters** for distance. Alternatively a comma separated list of specific single range values.  (required)
     * @param profile Specifies the routing profile. (optional, default to driving-car)
     * @param rangeType Set _time_ for isochrones or _distance_ for equidistants.  (optional, default to time)
     * @param interval Interval of isochrones or equidistants for one range value. value in **seconds** for time and **meters** for distance.  (optional)
     * @param units Unit format for  &#x60;range_type&#x3D;distance&#x60;.  (optional)
     * @param locationType start(default) treats the location(s) as starting point, destination as goal.  (optional, default to start)
     * @param attributes Values are area and reachfactor. Delimit with pipe (|) for both. &#x60;area&#x60; returns the area of each polygon in its feature properties. &#x60;reachfactor&#x60; returns a reachability score between 0 and 1.  (optional)
     * @param options For advanced options formatted as json object. For structure refer to the **options model** below. The available parameters are:     - &#x60;maximum_speed&#x60; : Specifies a maximum travel speed restriction in km/h.     - &#x60;avoid_features&#x60; : Pipe (|) seperated list of features to avoid.     The available features are :        |     Feature    | Available for                               |       |:--------------:|---------------------------------------------|       | &#x60;highways&#x60;     | driving-*                                   |       | &#x60;tollways&#x60;     | driving-*                                   |       | &#x60;ferries&#x60;      | driving-\\*, cycling-\\*, foot-\\*, wheelchair |       | &#x60;tunnels&#x60;      | driving-*                                   |       | &#x60;pavedroads&#x60;   | driving-\\*, cycling-*                       |       | &#x60;unpavedroads&#x60; | driving-\\*, cycling-*                       |       | &#x60;tracks&#x60;       | driving-*                                   |       | &#x60;fords&#x60;        | driving-\\*, cycling-\\*, foot-*              |       | &#x60;steps&#x60;        | cycling-\\*, foot-\\*, wheelchair             |       | &#x60;hills&#x60;        | cycling-\\*, foot-\\*                         |     - &#x60;vehicle_type&#x60; (for &#x60;profile&#x3D;driving-hgv&#x60; only): &#x60;hgv&#x60;,&#x60;bus&#x60;,&#x60;agricultural&#x60;,&#x60;delivery&#x60;,&#x60;forestry&#x60; and &#x60;goods&#x60;. It is needed for **vehicle restrictions** to work.     - &#x60;profile_params&#x60; : Specifies additional routing parameters.     - &#x60;weightings&#x60;: Weightings will prioritize specified factors over the shortest path.       - &#x60;steepness_difficulty&#x60;: Specifies the fitness level for &#x60;cycling-*&#x60; profiles.         - &#x60;level&#x60;: &#x60;0&#x60; &#x3D; Novice, &#x60;1&#x60; &#x3D; Moderate, &#x60;2&#x60; &#x3D; Amateur, &#x60;3&#x60; &#x3D; Pro. The prefered gradient increases with level        - &#x60;green&#x60;: Specifies the Green factor for &#x60;foot-*&#x60; profiles.         - &#x60;factor&#x60;: Values range from &#x60;0&#x60; to &#x60;1&#x60;. &#x60;0&#x60; equals normal routing. &#x60;1&#x60; will prefer ways through green areas over a shorter route.        - &#x60;quiet&#x60;: Specifies the Quiet factor for &#x60;foot-*&#x60; profiles.         - &#x60;factor&#x60;: Values range from &#x60;0&#x60; to &#x60;1&#x60;. &#x60;0&#x60; equals normal routing. &#x60;1&#x60; will prefer quiet ways over a shorter route.      - &#x60;restrictions&#x60; : Specifies restrictions for &#x60;driving-hgv&#x60;, &#x60;wheelchair&#x60; or &#x60;cycling-*&#x60; profiles.       - for &#x60;cycling-*&#x60;:                       |  Parameter | Description                                                                                                                                                                               |           |:----------:|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|           | &#x60;gradient&#x60; | Only for avoided &#x60;hills&#x60; or specified &#x60;steepness_difficulty&#x60;. Specifies the maximum route steepness in percent. Values range from &#x60;1&#x60; to &#x60;15&#x60;. Routes with a higher gradient are avoided. |        - for &#x60;driving-hgv&#x60;:          _(you have to specify the &#x60;vehicle_type&#x60; in the options for these parameters)_                  |  Parameter | Description                                                                                                                       |           |:----------:|-----------------------------------------------------------------------------------------------------------------------------------|           | &#x60;length&#x60;   | Length restriction in meters.                                                                                                     |           | &#x60;width&#x60;    | Width restriction in meters.                                                                                                      |           | &#x60;height&#x60;   | Height restriction in meters.                                                                                                     |           | &#x60;axleload&#x60; | Axleload restriction in tons.                                                                                                     |           | &#x60;weight&#x60;   | Weight restriction in tons.                                                                                                       |           | &#x60;hazmat&#x60;   | Specifies whether to use appropriate routing for delivering hazardous goods and avoiding water protected areas. Default is false. |        - for &#x60;wheelchair&#x60;:          |       Parameter       | Description                                                                                                         |         |:---------------------:|---------------------------------------------------------------------------------------------------------------------|         |     &#x60;surface_type&#x60;    | Specifies the [surface type](http://wiki.openstreetmap.org/wiki/Key:surface). Default is &#x60;\&quot;cobblestone:flattened\&quot;&#x60;. |         |      &#x60;track_type&#x60;     | Specifies the [grade](http://wiki.openstreetmap.org/wiki/Key:tracktype) of the route. Default is &#x60;\&quot;grade1\&quot;&#x60;.        |         |   &#x60;smoothness_type&#x60;   | Specifies the [smoothness](http://wiki.openstreetmap.org/wiki/Key:smoothness) of the route. Default is &#x60;\&quot;good\&quot;&#x60;.    |         | &#x60;maximum_sloped_curb&#x60; | Specifies the maximum height of the sloped curb in meters. Values are &#x60;0.03&#x60;, &#x60;0.06&#x60;(default), &#x60;0.1&#x60; or &#x60;any&#x60;.      |         |   &#x60;maximum_incline&#x60;   | Specifies the maximum incline as a percentage. &#x60;3&#x60;, &#x60;6&#x60;(default), &#x60;10&#x60;, &#x60;15&#x60; or &#x60;any&#x60;.                              |     - &#x60;avoid_polygons&#x60; : Comprises areas to be avoided for the route. Formatted as [geojson polygon](http://geojson.org/geojson-spec.html#id4) or [geojson multipolygon](http://geojson.org/geojson-spec.html#id7).  This is an example options object for a &#x60;cycling-*&#x60; profile:  &#x60;&#x60;&#x60;json {   \&quot;maximum_speed\&quot;: 10,   \&quot;avoid_features\&quot;: \&quot;unpavedroads\&quot;,   \&quot;profile_params\&quot;: {     \&quot;weightings\&quot;: {       \&quot;steepness_difficulty\&quot;: {         \&quot;level\&quot;: 1       },       \&quot;green\&quot;: {         \&quot;factor\&quot;: 0.8       },       \&quot;quiet\&quot;: {         \&quot;factor\&quot;: 1.0       }     },     \&quot;restrictions\&quot;: {       \&quot;gradient\&quot;: 5     }   },   \&quot;avoid_polygons\&quot;: {     \&quot;type\&quot;: \&quot;Polygon\&quot;,     \&quot;coordinates\&quot;: [                     [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0] ]    ]} } &#x60;&#x60;&#x60; The minified form(for copy paste purposes):  &#x60;{\&quot;maximum_speed\&quot;:10,\&quot;avoid_features\&quot;:\&quot;unpavedroads\&quot;,\&quot;profile_params\&quot;:{\&quot;weightings\&quot;:{\&quot;steepness_difficulty\&quot;:{\&quot;level\&quot;:1},\&quot;green\&quot;:{\&quot;factor\&quot;:0.8},\&quot;quiet\&quot;:{\&quot;factor\&quot;:1.0}},\&quot;restrictions\&quot;:{\&quot;gradient\&quot;:5}},\&quot;avoid_polygons\&quot;:{\&quot;type\&quot;:\&quot;Polygon\&quot;,\&quot;coordinates\&quot;:[[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]]]}}&#x60;  More examples can be found [here](https://github.com/GIScience/openrouteservice-docs#examples).  (optional)
     * @param intersections Specifies whether to return intersection polygons.  (optional, default to false)
     * @param id Arbitrary identification string of the request reflected in the meta information. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call isochronesGetAsync(List<String> locations, Double range, String profile, String rangeType, Double interval, String units, String locationType, List<String> attributes, String options, Boolean intersections, String id, final ApiCallback<IsochronesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = isochronesGetValidateBeforeCall(locations, range, profile, rangeType, interval, units, locationType, attributes, options, intersections, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IsochronesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
